------------------------------------------------
CREATING STAGING TABLE 

1. DROP TABLE STAGE_STATION CASCADE CONSTRAINTS;

CREATE TABLE STAGE_STATION 
(STATION_NO NUMBER(8) PRIMARY KEY, 
STATION_ID NUMBER(8) NOT NULL, 
STATION_NAME VARCHAR(30),
AREA_ID NUMBER(8) NOT NULL,
DB_SOURCE VARCHAR(30) NOT NULL
);


2. 

 DROP TABLE STAGE_OFFICER CASCADE CONSTRAINTS;

CREATE TABLE STAGE_OFFICER (
OFFICER_NO NUMBER(8) PRIMARY  KEY,
OFFICER_ID NUMBER(8) NOT NULL,
OFFICER_NAME VARCHAR(32),
RANK NUMBER(8),
DB_SOURCE VARCHAR(32) NOT NULL
);

 3.

DROP TABLE STAGE_REGISTER CASCADE CONSTRAINTS;

CREATE TABLE STAGE_REGISTER(
REGISTER_NO NUMBER(8) PRIMARY KEY,
REGISTER_ID NUMBER(8) NOT NULL,
CRIME_NAME VARCHAR(32),
CRIME_STATUS VARCHAR(32),
REGISTER_DATE DATE,
CLOSE_DATE DATE,
OFFICER_ID NUMBER(8),
WORK_START_DATE DATE,
WORK_END_DATE DATE,
STATION_ID NUMBER(8),
DB_SOURCE VARCHAR(32) NOT NULL
);
----------------------------------------------------------------

CREATING SEQUENCE + TRIGGER

1. DROP SEQUENCE STAGE_STATION_SEQ
 CREATE SEQUENCE STAGE_STATION_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER STAGE_STATION_TRIG
BEFORE INSERT ON STAGE_STATION
FOR EACH ROW 
BEGIN
    IF :NEW.STATION_NO IS NULL THEN
        SELECT STAGE_STATION_SEQ.NEXTVAL INTO :NEW.STATION_NO FROM SYS.DUAL;
    END IF;    
END;



2.DROP SEQUENCE STAGE_OFFICER_SEQ
CREATE SEQUENCE STAGE_OFFICER_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER STAGE_OFFICER_TRIG
BEFORE INSERT ON STAGE_OFFICER
FOR EACH ROW 
BEGIN
    IF :NEW.OFFICER_NO IS NULL THEN
        SELECT STAGE_OFFICER_SEQ.NEXTVAL INTO :NEW.OFFICER_NO FROM SYS.DUAL;
    END IF;    
END;

3. DROP SEQUENCE STAGE_REGISTER_SEQ
CREATE SEQUENCE STAGE_REGISTER_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER STAGE_REGISTER_TRIG
BEFORE INSERT ON STAGE_REGISTER
FOR EACH ROW 
BEGIN
    IF :NEW.REGISTER_NO IS NULL THEN
        SELECT STAGE_REGISTER_SEQ.NEXTVAL INTO :NEW.REGISTER_NO FROM SYS.DUAL;
    END IF;    
END;
-------------------------------------------------------
1ST STAGE INSERTING 

INSERT INTO STAGE_STATION (STATION_ID,STATION_NAME,db_source,area_id) 
SELECT station_id,station_name,'PRCS', FK1_AREA_ID
FROM pl_station;

INSERT INTO STAGE_OFFICER (OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE) 
SELECT emp_id,emp_name,emp_grade,'PRCS' 
FROM pl_police_employee;

INSERT INTO STAGE_REGISTER (REGISTER_ID, CRIME_NAME ,CRIME_STATUS,REGISTER_DATE ,CLOSE_DATE,OFFICER_ID , WORK_START_DATE, WORK_END_DATE,STATION_ID,DB_SOURCE) 
SELECT  R.REPORTED_CRIME_ID, C.CRIME_TYPE_DESC,R.CRIME_STATUS, R.DATE_REPORTED, R.DATE_CLOSED,W.LEAD_POLICE_OFFICER,W.WORK_START_DATE,W.WORK_END_DATE,R.FK2_STATION_ID,'PRCS' 
FROM PL_REPORTED_CRIME R  JOIN PL_CRIME_TYPE C ON R.FK1_CRIME_TYPE_ID=C.CRIME_TYPE_ID
FULL OUTER JOIN PL_WORK_ALLOCATION W ON R.REPORTED_CRIME_ID=W.S_REPORTED_CRIME_ID;
----------------------------------------------------------
ROUGH
SELECT STATION_ID FROM PL_STATION WHERE STATION_ID=10
INSERT INTO STAG_STATION VALUES(1,(SELECT STATION_ID FROM PL_STATION WHERE STATION_ID=10), 'STATION','PL_STATION',(SELECT FK1_AREA_ID FROM PL_STATION WHERE STATION_ID=10));
----------------------------------------------------------------

2nd staging

1. 

CREATE OR REPLACE PROCEDURE PRCS_STAG_OFFICER 
IS  
CURSOR CUR_STAGE_OFFICER 
IS
SELECT officer_id,first_name || ' ' || middle_name || ' ' ||last_name as officer_name,rank,'PS_wales' AS DB_SOURCE
FROM OFFICER WHERE officer_id not in (SELECT OFFICER_ID FROM STAGE_OFFICER);
VOFFICER CUR_STAGE_OFFICER%ROWTYPE;
BEGIN
OPEN CUR_STAGE_OFFICER;
LOOP
FETCH CUR_STAGE_OFFICER INTO VOFFICER;
EXIT WHEN CUR_STAGE_OFFICER%NOTFOUND;
INSERT INTO STAGE_OFFICER (OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE) VALUES (VOFFICER.OFFICER_ID,VOFFICER.OFFICER_NAME,VOFFICER.RANK,VOFFICER.DB_SOURCE);
END LOOP;
COMMIT;
CLOSE CUR_STAGE_OFFICER;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
END;

DECLARE 
BEGIN
PRCS_STAG_OFFICER;
END;

2. 

CREATE OR REPLACE PROCEDURE PRCS_STAG_REGISTER 
IS  
CURSOR CUR_STAGE_REGISTER 
IS
SELECT crime_id,crime_name,crime_status,reported_date, closed_date, police_id,'PS_wales' as DB_SOURCE
FROM CRIME_REGISTER; 
VREGISTER CUR_STAGE_REGISTER%ROWTYPE;
BEGIN
OPEN CUR_STAGE_REGISTER;
LOOP
FETCH CUR_STAGE_REGISTER INTO VREGISTER;
EXIT WHEN CUR_STAGE_REGISTER%NOTFOUND;
INSERT INTO STAGE_REGISTER (REGISTER_ID,CRIME_NAME,CRIME_STATUS,REGISTER_DATE,CLOSE_DATE,OFFICER_ID,WORK_START_DATE,WORK_END_DATE,STATION_ID,DB_SOURCE) 
VALUES (VREGISTER.CRIME_ID,VREGISTER.CRIME_NAME,VREGISTER.CRIME_STATUS,VREGISTER.REPORTED_DATE,VREGISTER.CLOSED_DATE,VREGISTER.POLICE_ID,'','','',VREGISTER.DB_SOURCE);
END LOOP;
COMMIT;
CLOSE CUR_STAGE_REGISTER;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
END;

DECLARE 
BEGIN
PRCS_STAG_REGISTER;
END;


----------------------------------------------------
creating bad and good table

1. DROP TABLE BAD_STAGE_STATION CASCADE CONSTRAINTS;

CREATE TABLE BAD_STAGE_STATION
(
    STATION_ERROR_ID NUMBER(8) PRIMARY KEY,
    STATION_ID NUMBER(8) NOT NULL, 
    STATION_NAME VARCHAR(30),
    AREA_ID NUMBER(8) NOT NULL,
    ERROR_IDENTIFICATION_DATE DATE,
    ERROR_RESOLUTION_DATE DATE,
    ERROR_DESCRIPTION VARCHAR(50),
    ERROR_STATUS VARCHAR(30),
    DB_SOURCE VARCHAR(30) NOT NULL
);

SEQUENCE

DROP SEQUENCE BAD_STAGE_STATION_SEQ
 CREATE SEQUENCE BAD_STAGE_STATION_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER BAD_STAGE_STATION_TRIG
BEFORE INSERT ON BAD_STAGE_STATION
FOR EACH ROW 
BEGIN
    IF :NEW.STATION_ERROR_ID IS NULL THEN
        SELECT BAD_STAGE_STATION_SEQ.NEXTVAL INTO :NEW.STATION_ERROR_ID FROM SYS.DUAL;
    END IF;    
END;

2. DROP TABLE BAD_STAGE_OFFICER CASCADE CONSTRAINTS;

CREATE TABLE BAD_STAGE_OFFICER 
(
    OFFICER_ERROR_ID NUMBER(8) PRIMARY  KEY,
    OFFICER_ID NUMBER(8) NOT NULL, 
    OFFICER_NAME VARCHAR(32),
    RANK number(8),
    ERROR_IDENTIFICATION_DATE DATE,
    ERROR_RESOLUTION_DATE DATE,
    ERROR_DESCRIPTION VARCHAR(50),
    ERROR_STATUS VARCHAR(30),
    DB_SOURCE VARCHAR(32) NOT NULL
);

SEQUENCE


DROP SEQUENCE BAD_STAGE_OFFICER_SEQ
 CREATE SEQUENCE BAD_STAGE_OFFICER_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER BAD_STAGE_OFFICER_TRIG
BEFORE INSERT ON BAD_STAGE_OFFICER
FOR EACH ROW 
BEGIN
    IF :NEW.OFFICER_ERROR_ID IS NULL THEN
        SELECT BAD_STAGE_OFFICER_SEQ.NEXTVAL INTO :NEW.OFFICER_ERROR_ID FROM SYS.DUAL;
    END IF;    
END;
3.  DROP TABLE BAD_STAGE_REGISTER CASCADE CONSTRAINTS;

CREATE TABLE BAD_STAGE_REGISTER(
    REGISTER_ERROR_ID NUMBER(8) PRIMARY KEY ,
    REGISTER_ID NUMBER(8) NOT NULL,
    CRIME_NAME VARCHAR(32),
    CRIME_STATUS VARCHAR(32),
    REGISTER_DATE DATE,
    CLOSE_DATE DATE,
    OFFICER_ID NUMBER(8),
    WORK_START_DATE DATE,
    WORK_END_DATE DATE,
    STATION_ID NUMBER(8),
    ERROR_IDENTIFICATION_DATE DATE,
    ERROR_RESOLUTION_DATE DATE,
    ERROR_DESCRIPTION VARCHAR(50),
    ERROR_STATUS VARCHAR(30),
    DB_SOURCE VARCHAR(32) NOT NULL
);

SEQUENCE

DROP SEQUENCE BAD_STAGE_REGISTER_SEQ
 CREATE SEQUENCE BAD_STAGE_REGISTER_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER BAD_STAGE_REGISTER_TRIG
BEFORE INSERT ON BAD_STAGE_REGISTER
FOR EACH ROW 
BEGIN
    IF :NEW.REGISTER_ERROR_ID IS NULL THEN
        SELECT BAD_STAGE_REGISTER_SEQ.NEXTVAL INTO :NEW.REGISTER_ERROR_ID FROM SYS.DUAL;
    END IF;    
END;
--------------------------------------------------
GOOD TABLE

1. 
DROP TABLE GOOD_STAGE_STATION CASCADE CONSTRAINTS;
CREATE TABLE GOOD_STAGE_STATION 
(
    STATION_GOOD_ID NUMBER(8) PRIMARY KEY, 
    STATION_ID NUMBER(8) NOT NULL, 
    STATION_NAME VARCHAR(30),
    AREA_ID NUMBER(8) NOT NULL,
    DB_SOURCE VARCHAR(30) NOT NULL
);

SEQUENCE

DROP SEQUENCE GOOD_STAGE_STATION_SEQ
 CREATE SEQUENCE GOOD_STAGE_STATION_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER GOOD_STAGE_STATION_TRIG
BEFORE INSERT ON GOOD_STAGE_STATION
FOR EACH ROW
BEGIN
    IF :NEW.STATION_GOOD_ID IS NULL THEN
        SELECT GOOD_STAGE_STATION_SEQ.NEXTVAL INTO :NEW.STATION_GOOD_ID FROM SYS.DUAL;
    END IF;    
END;
2. DROP TABLE GOOD_STAGE_OFFICER CASCADE CONSTRAINTS;

CREATE TABLE GOOD_STAGE_OFFICER (
    OFFICER_GOOD_ID NUMBER(8) PRIMARY  KEY,
    OFFICER_ID NUMBER(8) NOT NULL,
    OFFICER_NAME VARCHAR(32),
    RANK NUMBER(8),
    DB_SOURCE VARCHAR(32) NOT NULL
);

SEQUENCE

DROP SEQUENCE GOOD_STAGE_OFFICER_SEQ
 CREATE SEQUENCE GOOD_STAGE_OFFICER_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER GOOD_STAGE_OFFICER_TRIG
BEFORE INSERT ON GOOD_STAGE_OFFICER
FOR EACH ROW
BEGIN
    IF :NEW.OFFICER_GOOD_ID IS NULL THEN
        SELECT GOOD_STAGE_OFFICER_SEQ.NEXTVAL INTO :NEW.OFFICER_GOOD_ID FROM SYS.DUAL;
    END IF;    
END;

3. DROP TABLE GOOD_STAGE_REGISTER CASCADE CONSTRAINTS;

CREATE TABLE GOOD_STAGE_REGISTER(
REGISTER_GOOD_ID NUMBER(8) PRIMARY KEY,
REGISTER_ID NUMBER(8) NOT NULL,
CRIME_NAME VARCHAR(32),
CRIME_STATUS VARCHAR(32),
REGISTER_DATE DATE,
CLOSE_DATE DATE,
OFFICER_ID NUMBER(8),
WORK_START_DATE DATE,
WORK_END_DATE DATE,
STATION_ID NUMBER(8),
DB_SOURCE VARCHAR(32) NOT NULL
);

SEQUENCE 

DROP SEQUENCE GOOD_STAGE_REGISTER_SEQ
 CREATE SEQUENCE GOOD_STAGE_REGISTER_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER GOOD_STAGE_REGISTER_TRIG
BEFORE INSERT ON GOOD_STAGE_REGISTER
FOR EACH ROW 
BEGIN
    IF :NEW.REGISTER_GOOD_ID IS NULL THEN
        SELECT GOOD_STAGE_REGISTER_SEQ.NEXTVAL INTO :NEW.REGISTER_GOOD_ID FROM SYS.DUAL;
    END IF;    
END;
----------------------------------------------------
changing into bad data
1.
 UPDATE stage_station 
SET station_name=null
WHERE station_no in (2,4,7);

2.
UPDATE stage_officer 
SET officer_name=null
WHERE officer_no in (23,25,28,32);

3. UPDATE stage_station 
SET station_name='!Cross Gates^%#' 
WHERE station_no = 3;

UPDATE stage_station 
SET station_name='K!ings Cro$ss#' 
WHERE station_no = 6;

4. UPDATE stage_officer 
SET officer_name='Ma@ry Beth Ai!t^ken' 
WHERE officer_no =13;

UPDATE stage_officer 
SET officer_name='!Ma@x Brow*n' 
WHERE officer_no =8;
----------------------------------------------------
Inserting into bad and good table

1. Officer when officer name is null 

CREATE OR REPLACE PROCEDURE proc_filter_officer
IS
CURSOR cur_filter_officer
IS
SELECT OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE FROM STAGE_OFFICER;
v_officer_id stage_officer.officer_id%type;
v_officer_name stage_officer.officer_name%type;
v_rank stage_officer.rank%type;
v_db_source stage_officer.db_source%type;
BEGIN
OPEN cur_filter_officer;
LOOP
FETCH cur_filter_officer
INTO
 v_officer_id, v_officer_name,v_rank, v_db_source;
EXIT WHEN cur_filter_officer%NOTFOUND;
IF (v_officer_name IS NULL OR REGEXP_LIKE (v_officer_name, '[!%@*^#$&]')) THEN
INSERT INTO BAD_STAGE_OFFICER (officer_id, officer_name, rank, error_identification_date, error_resolution_date, error_description,error_status,db_source)
VALUES (v_officer_id,v_officer_name,v_rank, SYSDATE,NULL,'NULL VALUE','NOT FIXED',v_db_source);
ELSE 
INSERT INTO GOOD_STAGE_OFFICER (officer_id, officer_name,rank,db_source)
VALUES (v_officer_id,v_officer_name, v_rank,v_db_source);
END IF;
END LOOP;
COMMIT;
CLOSE cur_filter_officer; 
EXCEPTION
WHEN no_data_found THEN 
RAISE_APPLICATION_ERROR (-20001,'NO DATA FOUND');
END;

DECLARE
BEGIN
proc_filter_officer;
END;


2. 
CREATE OR REPLACE PROCEDURE proc_filter_station
IS
CURSOR cur_filter_station
IS
SELECT STATION_ID,STATION_NAME,AREA_ID,DB_SOURCE FROM STAGE_STATION;
v_station_id stage_station.station_id%type;
v_station_name stage_station.station_name%type;
v_area_id stage_station.area_id%type;
v_db_source stage_station.db_source%type;
BEGIN
OPEN cur_filter_station;
LOOP
FETCH cur_filter_station
INTO
 v_station_id, v_station_name,v_area_id, v_db_source;
EXIT WHEN cur_filter_station%NOTFOUND;
IF (v_station_name IS NULL OR REGEXP_LIKE (v_station_name, '[!%^#$&]')) THEN
INSERT INTO BAD_STAGE_STATION (station_id, station_name,area_id,  error_identification_date, error_resolution_date, error_description,error_status,db_source)
VALUES (v_station_id,v_station_name,v_area_id, SYSDATE,NULL,'NULL VALUE','NOT FIXED',v_db_source);
ELSE 
INSERT INTO GOOD_STAGE_STATION (station_id, station_name,area_id,db_source)
VALUES (v_station_id,v_station_name,v_area_id, v_db_source);
END IF;
END LOOP;
COMMIT;
CLOSE cur_filter_station; 
EXCEPTION
WHEN no_data_found THEN 
RAISE_APPLICATION_ERROR (-20001,'NO DATA FOUND');
END;

DECLARE 
BEGIN
proc_filter_station;
END;


3.
CREATE OR REPLACE PROCEDURE proc_filter_register
IS
CURSOR cur_filter_register
IS
SELECT REGISTER_ID,CRIME_NAME,CRIME_STATUS,REGISTER_DATE,CLOSE_DATE,OFFICER_ID,WORK_START_DATE,WORK_END_DATE,STATION_ID,DB_SOURCE FROM STAGE_REGISTER;
v_register_id stage_register.register_id%type;
v_crime_name stage_register.crime_name%type;
v_crime_status stage_register.crime_status%type;
v_register_date stage_register.register_date%type;
v_close_date stage_register.close_date%type;
v_officer_id stage_register.officer_id%type;
v_station_id stage_register.station_id%type;
v_start_date stage_register.work_start_date%type;
v_end_date stage_register.work_end_date%type;
v_db_source stage_register.db_source%type;
BEGIN
OPEN cur_filter_register;
LOOP
FETCH cur_filter_register
INTO
 v_register_id, v_crime_name,v_crime_status,v_register_date,v_close_date,v_officer_id,v_start_date,v_end_date,v_station_id, v_db_source;
EXIT WHEN cur_filter_register%NOTFOUND;
IF (v_crime_name IS NULL OR v_register_date IS NULL OR v_crime_status  IS NULL OR (v_close_date is NULL AND v_crime_status = 'Closed') OR (v_officer_id IS NOT NULL AND v_start_date IS NULL)OR v_officer_id IS NULL OR v_station_id IS NULL OR v_register_date>v_close_date OR v_start_date>v_end_date) THEN
INSERT INTO BAD_STAGE_REGISTER (register_id, crime_name, crime_status, register_date,close_date, officer_id, work_start_date, work_end_date, station_id,  error_identification_date, error_resolution_date, error_description,error_status,db_source)
VALUES (v_register_id,v_crime_name, v_crime_status, v_register_date,v_close_date,v_officer_id,v_start_date,v_end_date,v_station_id, SYSDATE,NULL,'NULL VALUE','NOT FIXED',v_db_source);
ELSE 
INSERT INTO GOOD_STAGE_REGISTER (register_id, crime_name, crime_status, register_date,close_date, officer_id, work_start_date,work_end_date, station_id ,db_source)
VALUES (v_register_id,v_crime_name, v_crime_status, v_register_date,v_close_date,v_officer_id,v_start_date,v_end_date,v_station_id, v_db_source);
END IF;
END LOOP;
COMMIT;
CLOSE cur_filter_register; 
EXCEPTION
WHEN no_data_found THEN 
RAISE_APPLICATION_ERROR (-20001,'NO DATA FOUND');
END;

DECLARE 
BEGIN
proc_filter_register;
END;


---------------------------------------------------------------------------
cleaning
1. 

CREATE OR REPLACE PROCEDURE clean_station IS
CURSOR cur_station
IS 
SELECT * FROM bad_stage_station ;
BEGIN 
FOR v in cur_station
LOOP
    IF (v.station_name is null)
    THEN
    UPDATE bad_stage_station SET STATION_NAME ='n/a' ,ERROR_RESOLUTION_DATE=sysdate, ERROR_STATUS='FIXED'
    WHERE STATION_NAME IS NULL;
    ELSE
    UPDATE bad_stage_station SET STATION_NAME = regexp_replace(v.station_name,'[!%^#$&]'),
    ERROR_RESOLUTION_DATE=CURRENT_TIMESTAMP, ERROR_STATUS='FIXED'
    WHERE REGEXP_LIKE(STATION_NAME,'[!%^#$&]');
    END IF;
    
END LOOP;
END;

declare
begin
clean_station;
end;


2. 

CREATE OR REPLACE PROCEDURE clean_register IS
CURSOR cur_register
IS 
SELECT * FROM bad_stage_register ;
BEGIN 
FOR v in cur_register
LOOP
    IF (v.crime_name is null)
    THEN
    UPDATE bad_stage_register SET CRIME_NAME ='n/a' ,ERROR_RESOLUTION_DATE=sysdate, ERROR_STATUS='FIXED'
    WHERE CRIME_NAME IS NULL;
    ELSIF(v.officer_id is null)
    THEN
        UPDATE bad_stage_register SET officer_id =0 ,ERROR_RESOLUTION_DATE=sysdate, ERROR_STATUS='FIXED'
        where officer_id is null;
    ELSIF(v.station_id is null)
    THEN
        UPDATE bad_stage_register SET station_id =0 ,ERROR_RESOLUTION_DATE=sysdate, ERROR_STATUS='FIXED'
        where station_id is null;
   ELSIF(v.work_start_date>v.work_end_date)
   THEN
     UPDATE bad_stage_register SET  WORK_END_DATE=sysdate,
    ERROR_RESOLUTION_DATE=CURRENT_TIMESTAMP, ERROR_STATUS='FIXED'
    WHERE WORK_START_DATE>WORK_END_DATE;
    ELSE 
    UPDATE bad_stage_register SET CLOSE_DATE=SYSDATE,
    ERROR_RESOLUTION_DATE=CURRENT_TIMESTAMP, ERROR_STATUS='FIXED'
    WHERE REGISTER_DATE>CLOSE_DATE;
    end if;
END LOOP;
END;

declare
begin
clean_register;
end;

3.

CREATE OR REPLACE PROCEDURE clean_officer IS
CURSOR cur_officer
IS 
SELECT * FROM bad_stage_officer;
BEGIN 
FOR v in cur_officer
LOOP
    IF (v.officer_name is null)
    THEN
    UPDATE bad_stage_officer SET OFFICER_NAME ='n/a' ,ERROR_RESOLUTION_DATE=sysdate, ERROR_STATUS='FIXED'
    WHERE OFFICER_NAME IS NULL;
    ELSE
    UPDATE bad_stage_officer SET OFFICER_NAME = regexp_replace(v.officer_name,'[!%^#$&]'),
    ERROR_RESOLUTION_DATE=CURRENT_TIMESTAMP, ERROR_STATUS='FIXED'
    WHERE REGEXP_LIKE(OFFICER_NAME,'[!%^#$&]');
    END IF;
END LOOP;
END;

declare
begin
clean_officer;
end;
---------------------------------------------------

CREATING TRANSFORM TABLE

1.
DROP TABLE TRANSFORM_STATION CASCADE CONSTRAINTS;
/
CREATE TABLE TRANSFORM_STATION
(
    STATION_NO NUMBER(8) PRIMARY KEY, 
    STATION_ID NUMBER(8) NOT NULL, 
    STATION_NAME VARCHAR(30),
    AREA_ID NUMBER(8) NOT NULL,
    DB_SOURCE VARCHAR(30) NOT NULL
);
/
2.
DROP TABLE TRANSFORM_OFFICER CASCADE CONSTRAINTS;
/
CREATE TABLE TRANSFORM_OFFICER (
OFFICER_NO NUMBER(8) PRIMARY  KEY,
OFFICER_ID NUMBER(8) NOT NULL,
OFFICER_NAME VARCHAR(32),
RANK NUMBER(8)NOT NULL,
DB_SOURCE VARCHAR(30) NOT NULL
);
/
3.

DROP TABLE TRANSFORM_REGISTER CASCADE CONSTRAINTS;
/
CREATE TABLE TRANSFORM_REGISTER(
REGISTER_NO NUMBER(8) PRIMARY KEY,
REGISTER_ID NUMBER(8) NOT NULL,
CRIME_NAME VARCHAR(32),
CRIME_STATUS VARCHAR(32),
REGISTER_DATE DATE,
CLOSE_DATE DATE,
OFFICER_ID NUMBER(8),
WORK_START_DATE DATE,
WORK_END_DATE DATE,
STATION_ID NUMBER(8),
DB_SOURCE VARCHAR(30) NOT NULL
);
/


------------------------------
creating sequence

1.
DROP SEQUENCE TRANS_STATION_SEQ;
/
 CREATE SEQUENCE TRANS_STATION_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRANS_STATION_TRIG
BEFORE INSERT ON TRANSFORM_STATION
FOR EACH ROW 
BEGIN
    IF :NEW.STATION_NO IS NULL THEN
        SELECT TRANS_STATION_SEQ.NEXTVAL INTO :NEW.STATION_NO FROM SYS.DUAL;
    END IF;    
END;

2.
DROP SEQUENCE TRANS_OFFICER_SEQ;
/
CREATE SEQUENCE TRANS_OFFICER_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRANS_OFFICER_TRIG
BEFORE INSERT ON TRANSFORM_OFFICER
FOR EACH ROW 
BEGIN
    IF :NEW.OFFICER_NO IS NULL THEN
        SELECT TRANS_OFFICER_SEQ.NEXTVAL INTO :NEW.OFFICER_NO FROM SYS.DUAL;
    END IF;    
END;

3.
 DROP SEQUENCE TRANS_REGISTER_SEQ;
 /
CREATE SEQUENCE TRANS_REGISTER_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TRANS_REGISTER_TRIG
BEFORE INSERT ON TRANSFORM_REGISTER
FOR EACH ROW 
BEGIN
    IF :NEW.REGISTER_NO IS NULL THEN
        SELECT TRANS_REGISTER_SEQ.NEXTVAL INTO :NEW.REGISTER_NO FROM SYS.DUAL;
    END IF;    
END;
/
----------------------------
1st step transforming

1.

INSERT INTO TRANSFORM_STATION (STATION_ID,STATION_NAME,area_id,DB_SOURCE) 
SELECT station_id,station_name,AREA_ID,db_source
FROM bad_stage_station;

2.

INSERT INTO TRANSFORM_OFFICER (OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE) 
SELECT OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE
FROM BAD_STAGE_OFFICER;

3.

INSERT INTO TRANSFORM_REGISTER (REGISTER_ID, CRIME_NAME ,CRIME_STATUS,REGISTER_DATE ,CLOSE_DATE,OFFICER_ID ,WORK_START_DATE,WORK_END_DATE, STATION_ID,DB_SOURCE) 
SELECT  REGISTER_ID, CRIME_NAME ,CRIME_STATUS,REGISTER_DATE ,CLOSE_DATE,OFFICER_ID , WORK_START_DATE,WORK_END_DATE,STATION_ID,DB_SOURCE 
FROM BAD_STAGE_REGISTER;


-------------------------------------------
2nd step transforimng

1.


CREATE OR REPLACE PROCEDURE PRCS_TRANS_STATION
IS  
CURSOR CUR_TRANS_STATION
IS
SELECT station_id, station_name,area_id,DB_SOURCE
FROM GOOD_STAGE_STATION WHERE station_id not in (SELECT station_ID FROM TRANSFORM_OFFICER);
VSTATION CUR_TRANS_STATION%ROWTYPE;
BEGIN
OPEN CUR_TRANS_STATION;
LOOP
FETCH CUR_TRANS_STATION INTO VSTATION;
EXIT WHEN CUR_TRANS_STATION%NOTFOUND;
INSERT INTO TRANSFORM_STATION (STATION_ID,STATION_NAME,AREA_ID,DB_SOURCE) VALUES (VSTATION.STATION_ID,VSTATION.STATION_NAME,VSTATION.AREA_ID,VSTATION.DB_SOURCE);
END LOOP;
COMMIT;
CLOSE CUR_TRANS_STATION;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
END;

DECLARE 
BEGIN
PRCS_TRANS_STATION;
END;

2.

CREATE OR REPLACE PROCEDURE PRCS_TRANS_OFFICER 
IS  
CURSOR CUR_TRANS_OFFICER 
IS
SELECT officer_id, officer_name,RANK, DB_SOURCE
FROM GOOD_STAGE_OFFICER WHERE officer_id not in (SELECT OFFICER_ID FROM TRANSFORM_OFFICER);
VOFFICER CUR_TRANS_OFFICER%ROWTYPE;
BEGIN
OPEN CUR_TRANS_OFFICER;
LOOP
FETCH CUR_TRANS_OFFICER INTO VOFFICER;
EXIT WHEN CUR_TRANS_OFFICER%NOTFOUND;
INSERT INTO TRANSFORM_OFFICER (OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE) VALUES (VOFFICER.OFFICER_ID,VOFFICER.OFFICER_NAME,VOFFICER.RANK,VOFFICER.DB_SOURCE);
END LOOP;
COMMIT;
CLOSE CUR_TRANS_OFFICER;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
END;

DECLARE 
BEGIN
PRCS_TRANS_OFFICER;
END;

3.

CREATE OR REPLACE PROCEDURE PRCS_TRANS_REGISTER 
IS  
CURSOR CUR_TRANS_REGISTER 
IS
SELECT register_id,crime_name,crime_status,register_date, close_date, officer_id,work_start_date,work_end_date,station_id,DB_SOURCE
FROM GOOD_STAGE_REGISTER; 
VREGISTER CUR_TRANS_REGISTER%ROWTYPE;
BEGIN
OPEN CUR_TRANS_REGISTER;
LOOP
FETCH CUR_TRANS_REGISTER INTO VREGISTER;
EXIT WHEN CUR_TRANS_REGISTER%NOTFOUND;
INSERT INTO TRANSFORM_REGISTER (REGISTER_ID,CRIME_NAME,CRIME_STATUS,REGISTER_DATE,CLOSE_DATE,OFFICER_ID,WORK_START_DATE,WORK_END_DATE,STATION_ID,DB_SOURCE) 
VALUES (VREGISTER.REGISTER_ID,VREGISTER.CRIME_NAME,VREGISTER.CRIME_STATUS,VREGISTER.REGISTER_DATE,VREGISTER.CLOSE_DATE,VREGISTER.OFFICER_ID,VREGISTER.WORK_START_DATE,VREGISTER.WORK_END_DATE,VREGISTER.STATION_ID,VREGISTER.DB_SOURCE);
END LOOP;
COMMIT;
CLOSE CUR_TRANS_REGISTER;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
END;

DECLARE 
BEGIN
PRCS_TRANS_REGISTER;
END;



-----------------------------------------------------------------------------------

 SEQUENCE FOR DIM AND FACT TABBLES

1. DROP SEQUENCE DIM_STATION_SEQ;
/
 CREATE SEQUENCE DIM_STATION_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER DIM_STATION_TRIG
BEFORE INSERT ON DIM_STATION
FOR EACH ROW 
BEGIN
    IF :NEW.STATION_NO IS NULL THEN
        SELECT DIM_STATION_SEQ.NEXTVAL INTO :NEW.STATION_NO FROM SYS.DUAL;
    END IF;    
END;

2.

DROP SEQUENCE DIM_OFFICER_SEQ;
/
CREATE SEQUENCE DIM_OFFICER_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER DIM_OFFICER_TRIG
BEFORE INSERT ON DIM_OFFICER
FOR EACH ROW 
BEGIN
    IF :NEW.OFFICER_NO IS NULL THEN
        SELECT DIM_OFFICER_SEQ.NEXTVAL INTO :NEW.OFFICER_NO FROM SYS.DUAL;
    END IF;    
END;

3.

DROP SEQUENCE DIM_REGISTER_SEQ;
 /
CREATE SEQUENCE DIM_REGISTER_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER DIM_REGISTER_TRIG
BEFORE INSERT ON DIM_REGISTER
FOR EACH ROW 
BEGIN
    IF :NEW.REGISTER_NO IS NULL THEN
        SELECT DIM_REGISTER_SEQ.NEXTVAL INTO :NEW.REGISTER_NO FROM SYS.DUAL;
    END IF;    
END;

4.

DROP SEQUENCE DIM_TIME_SEQ;
 /
CREATE SEQUENCE DIM_TIME_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER DIM_TIME_TRIG
BEFORE INSERT ON DIM_TIME
FOR EACH ROW 
BEGIN
    IF :NEW.TIME_ID IS NULL THEN
        SELECT DIM_TIME_SEQ.NEXTVAL INTO :NEW.TIME_ID FROM SYS.DUAL;
    END IF;    
END;

5.

DROP SEQUENCE FACT_CRIME_SEQ;
 /
CREATE SEQUENCE FACT_CRIME_SEQ START WITH 1 INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER FACT_CRIME_TRIG
BEFORE INSERT ON FACT_CRIME
FOR EACH ROW 
BEGIN
    IF :NEW.CRIME_ID IS NULL THEN
        SELECT FACT_CRIME_SEQ.NEXTVAL INTO :NEW.CRIME_ID FROM SYS.DUAL;
    END IF;    
END;

-----------------------------------------------------------------------------------------

loading data

1.

CREATE OR REPLACE PROCEDURE proc_dim_time
IS
BEGIN
    MERGE INTO DIM_TIME dt
    USING
    (SELECT DISTINCT 
    to_char(CLOSE_DATE,'YYYY') YEAR,
    to_char(CLOSE_DATE,'MM') MONTH,
    to_char(CLOSE_DATE,'DD') DAY
    FROM TRANSFORM_REGISTER) t
    ON(dt.YEAR = t.year)
    WHEN NOT MATCHED THEN
    INSERT (YEAR, MONTH,DAY)
    VALUES (t.YEAR, t.MONTH,t.DAY);
END  proc_dim_time;

DECLARE 
BEGIN 
proc_dim_time;
END;

2.

INSERT INTO DIM_STATION(STATION_ID,STATION_NAME,AREA_ID,DB_SOURCE)
SELECT STATION_ID, STATION_NAME,AREA_ID,DB_SOURCE FROM TRANSFORM_STATION;

3.

INSERT INTO DIM_OFFICER (OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE) 
SELECT OFFICER_ID,OFFICER_NAME,RANK,DB_SOURCE
FROM TRANSFORM_OFFICER;

4.

INSERT INTO DIM_REGISTER (REGISTER_ID, CRIME_NAME ,CRIME_STATUS,REGISTER_DATE ,CLOSE_DATE,OFFICER_ID , WORK_START_DATE,WORK_END_DATE,STATION_ID,DB_SOURCE) 
SELECT  REGISTER_ID, CRIME_NAME ,CRIME_STATUS,REGISTER_DATE ,CLOSE_DATE,OFFICER_ID ,WORK_START_DATE,WORK_END_DATE, STATION_ID,DB_SOURCE 
FROM TRANSFORM_REGISTER;

5.

INSERT INTO FACT_CRIME (NO_OF_YEARS,STATION_NO,TIME_ID,OFFICER_NO,REGISTER_NO)
SELECT distinct EXTRACT(YEAR FROM CLOSE_DATE) - EXTRACT(YEAR FROM REGISTER_DATE) AS NO_OF_YEARS,t_station.STATION_NO,d_time.TIME_ID,t_officer.OFFICER_NO,REGISTER_NO
FROM TRANSFORM_REGISTER T_REGISTER
left JOIN TRANSFORM_OFFICER T_OFFICER
ON T_REGISTER.OFFICER_ID=T_OFFICER.OFFICER_ID
LEFT JOIN TRANSFORM_STATION T_STATION 
ON T_REGISTER.STATION_ID=T_STATION.STATION_ID
LEFT JOIN DIM_TIME D_TIME
ON D_TIME.YEAR=EXTRACT(YEAR FROM CLOSE_DATE)
AND D_TIME.MONTH=EXTRACT(MONTH FROM CLOSE_DATE)
AND D_TIME.DAY=EXTRACT(DAY FROM CLOSE_DATE)

